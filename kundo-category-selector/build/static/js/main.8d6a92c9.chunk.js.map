{"version":3,"sources":["components/ConfigScreen.tsx","components/Field.tsx","index.tsx"],"names":["Config","props","onConfigure","a","sdk","app","getCurrentState","currentState","parameters","state","targetState","this","getParameters","setState","setReady","className","css","margin","Component","Field","useState","isOpen","setOpen","categories","setCategories","field","getValue","value","setValue","React","useEffect","instance","fetch","kundoSlug","then","x","json","length","console","log","displayValue","some","slug","find","heading_name","onClose","toggleElement","size","buttonType","indicateDropdown","onClick","e","isTitle","isActive","map","c","init","root","document","getElementById","location","locations","LOCATION_APP_CONFIG","component","LOCATION_ENTRY_FIELD","forEach","componentLocationSetting","is","render"],"mappings":"2TAeqBA,E,kDACnB,WAAYC,GAAqB,IAAD,8BAC9B,cAAMA,IAqBRC,YAtBgC,sBAsBlB,4BAAAC,EAAA,sEAOe,EAAKF,MAAMG,IAAIC,IAAIC,kBAPlC,cAONC,EAPM,yBASL,CAELC,WAAY,EAAKC,MAAMD,WAGvBE,YAAaH,IAdH,2CApBZ,EAAKE,MAAQ,CAAED,WAAY,IAK3BP,EAAMG,IAAIC,IAAIH,aAAY,kBAAM,EAAKA,iBAPP,E,uMAa6BS,KAAKV,MAAMG,IAAIC,IAAIO,gB,OAAxEJ,E,OAENG,KAAKE,SAASL,EAAa,CAAEA,cAAeG,KAAKF,OAAO,WAGtD,EAAKR,MAAMG,IAAIC,IAAIS,c,qIAuBrB,OACE,cAAC,YAAD,CAAWC,UAAWC,YAAI,CAAEC,OAAQ,SAApC,SACE,eAAC,OAAD,WACE,cAAC,UAAD,yBACA,cAAC,YAAD,iF,GA9C0BC,a,QC+DrBC,EAjED,SAAClB,GAAuB,IAAD,IAETmB,oBAAS,GAFA,mBAE5BC,EAF4B,KAEpBC,EAFoB,OAGAF,mBAA0B,IAH1B,mBAG5BG,EAH4B,KAGjBC,EAHiB,OAITJ,mBAASnB,EAAMG,IAAIqB,MAAMC,YAJhB,mBAI5BC,EAJ4B,KAIrBC,EAJqB,KAgBnC,GAVAC,IAAMC,WAAU,WACd,IAAMC,EAAgB9B,EAAMG,IAAII,WAAWuB,SAC3CC,MAAM,mCAAD,OAAoCD,EAASE,UAA7C,UACJC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAE,GACJZ,EAAcY,EAAK,GAAGb,iBAExB,IAGuB,IAAtBA,EAAWc,OAAc,OAAO,KACnCC,QAAQC,IAAItC,GACZ,IAAMuC,EAAejB,EAAWkB,MAAK,SAAAN,GAAC,OAAIA,EAAEO,OAASf,KAAhC,UACCJ,EAAWoB,MAAK,SAAAR,GAAC,OAAIA,EAAEO,OAASf,YADjC,aACC,EAAwCiB,aAAe,sBAE7E,OACE,cAAC,WAAD,CACEvB,OAAQA,EACRwB,QAAS,kBAAMvB,GAAQ,IACvBwB,cACE,cAAC,SAAD,CACEC,KAAK,QACLC,WAAW,QACXC,kBAAgB,EAChBC,QAAS,kBAAM5B,GAASD,IAJ1B,SAMCmB,IAVL,SAcE,eAAC,eAAD,WACE,cAAC,mBAAD,CACIU,QAAS,SAACC,GACRvB,EAAS,MACTN,GAAQ,GACRrB,EAAMG,IAAIqB,MAAMG,SAAS,OAE3BwB,SAAS,EACTC,SAAmB,MAAT1B,EAPd,iCAWCJ,EAAW+B,KAAI,SAAAC,GAAC,OACf,cAAC,mBAAD,CACEL,QAAS,SAACC,GACRvB,EAAS2B,EAAEb,MACXpB,GAAQ,GACRrB,EAAMG,IAAIqB,MAAMG,SAAS2B,EAAEb,OAE7BW,SAAUE,EAAEb,OAASf,EANvB,SAQG4B,EAAEX,cARkBW,EAAEb,eChCjCc,gBAAK,SAACpD,GACJ,IAAMqD,EAAOC,SAASC,eAAe,QAKH,CAChC,CACEC,SAAUC,YAAUC,oBACpBC,UAAW,cAAC,EAAD,CAAQ3D,IAAMA,KAE3B,CACEwD,SAAUC,YAAUG,qBACpBD,UAAW,cAAC,EAAD,CAAO3D,IAAMA,MAKF6D,SAAQ,SAAAC,GAC5B9D,EAAIwD,SAASO,GAAGD,EAAyBN,WAC3CQ,iBAAOF,EAAyBH,UAAWN,W","file":"static/js/main.8d6a92c9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { AppExtensionSDK } from 'contentful-ui-extensions-sdk';\nimport { Heading, Form, Workbench, Paragraph } from '@contentful/forma-36-react-components';\nimport { css } from 'emotion';\n\nexport interface AppInstallationParameters {}\n\ninterface ConfigProps {\n  sdk: AppExtensionSDK;\n}\n\ninterface ConfigState {\n  parameters: AppInstallationParameters;\n}\n\nexport default class Config extends Component<ConfigProps, ConfigState> {\n  constructor(props: ConfigProps) {\n    super(props);\n    this.state = { parameters: {} };\n\n    // `onConfigure` allows to configure a callback to be\n    // invoked when a user attempts to install the app or update\n    // its configuration.\n    props.sdk.app.onConfigure(() => this.onConfigure());\n  }\n\n  async componentDidMount() {\n    // Get current parameters of the app.\n    // If the app is not installed yet, `parameters` will be `null`.\n    const parameters: AppInstallationParameters | null = await this.props.sdk.app.getParameters();\n\n    this.setState(parameters ? { parameters } : this.state, () => {\n      // Once preparation has finished, call `setReady` to hide\n      // the loading screen and present the app to a user.\n      this.props.sdk.app.setReady();\n    });\n  }\n\n  onConfigure = async () => {\n    // This method will be called when a user clicks on \"Install\"\n    // or \"Save\" in the configuration screen.\n    // for more details see https://www.contentful.com/developers/docs/extensibility/ui-extensions/sdk-reference/#register-an-app-configuration-hook\n\n    // Get current the state of EditorInterface and other entities\n    // related to this app installation\n    const currentState = await this.props.sdk.app.getCurrentState();\n\n    return {\n      // Parameters to be persisted as the app configuration.\n      parameters: this.state.parameters,\n      // In case you don't want to submit any update to app\n      // locations, you can just pass the currentState as is\n      targetState: currentState\n    };\n  };\n\n  render() {\n    return (\n      <Workbench className={css({ margin: '80px' })}>\n        <Form>\n          <Heading>App Config</Heading>\n          <Paragraph>Welcome to your contentful app. This is your config page.</Paragraph>\n        </Form>\n      </Workbench>\n    );\n  }\n}\n","import React,{useState} from 'react';\nimport { Button, Dropdown, DropdownList, DropdownListItem } from '@contentful/forma-36-react-components';\nimport { FieldExtensionSDK } from 'contentful-ui-extensions-sdk';\n\ninterface FieldProps {\n  sdk: FieldExtensionSDK;\n}\n\ninterface KundoCategory{\n  slug:string\n  heading_name:string\n}\n\nconst Field = (props: FieldProps) => {\n\n  const [isOpen, setOpen] = useState(false);\n  const [categories,setCategories] = useState<KundoCategory[]>([])\n  const [value, setValue] = useState(props.sdk.field.getValue())\n\n  React.useEffect(() => {\n    const instance: any = props.sdk.parameters.instance\n    fetch(`https://kundo.se/api/properties/${instance.kundoSlug}.json`)\n    .then(x => x.json())\n    .then(json => {\n      setCategories(json[0].categories)\n    })\n  },[])\n  \n\n  if(categories.length === 0) return null;\n  console.log(props)\n  const displayValue = categories.some(x => x.slug === value) ?\n                        categories.find(x => x.slug === value)?.heading_name : \"Välj en kategori\"\n\n  return (\n    <Dropdown\n      isOpen={isOpen}\n      onClose={() => setOpen(false)}\n      toggleElement={\n        <Button\n          size=\"small\"\n          buttonType=\"muted\"\n          indicateDropdown\n          onClick={() => setOpen(!isOpen)}\n        >\n        {displayValue}\n        </Button>\n      }\n    >\n      <DropdownList>\n        <DropdownListItem\n            onClick={(e) => {\n              setValue(null)\n              setOpen(false)\n              props.sdk.field.setValue(null)\n            }} \n            isTitle={true}\n            isActive={value == null}\n          >\n            Välj en kategori\n        </DropdownListItem>\n        {categories.map(c => \n          <DropdownListItem key={c.slug} \n            onClick={(e) => {\n              setValue(c.slug)\n              setOpen(false)\n              props.sdk.field.setValue(c.slug)\n            }} \n            isActive={c.slug === value}\n          >\n            {c.heading_name}\n          </DropdownListItem>)\n        }\n      </DropdownList>\n    </Dropdown>\n  );\n};\n\nexport default Field;\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport {\n  AppExtensionSDK,\n  FieldExtensionSDK,\n  SidebarExtensionSDK,\n  DialogExtensionSDK,\n  EditorExtensionSDK,\n  PageExtensionSDK,\n  BaseExtensionSDK,\n  init,\n  locations\n} from 'contentful-ui-extensions-sdk';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport '@contentful/forma-36-fcss/dist/styles.css';\nimport '@contentful/forma-36-tokens/dist/css/index.css';\nimport './index.css';\n\nimport Config from './components/ConfigScreen';\nimport Field from './components/Field';\n\n\nimport LocalhostWarning from './components/LocalhostWarning';\n\nif (process.env.NODE_ENV === 'development' && window.self === window.top) {\n  // You can remove this if block before deploying your app\n  const root = document.getElementById('root');\n  render(<LocalhostWarning />, root);\n} else {\n  init((sdk: BaseExtensionSDK) => {\n    const root = document.getElementById('root');\n\n    // All possible locations for your app\n    // Feel free to remove unused locations\n    // Dont forget to delete the file too :)\n    const ComponentLocationSettings = [\n      {\n        location: locations.LOCATION_APP_CONFIG,\n        component: <Config sdk={(sdk as unknown) as AppExtensionSDK} />\n      },\n      {\n        location: locations.LOCATION_ENTRY_FIELD,\n        component: <Field sdk={(sdk as unknown) as FieldExtensionSDK} />\n      },\n    ];\n\n    // Select a component depending on a location in which the app is rendered.\n    ComponentLocationSettings.forEach(componentLocationSetting => {\n      if (sdk.location.is(componentLocationSetting.location)) {\n        render(componentLocationSetting.component, root);\n      }\n    });\n  });\n}\n"],"sourceRoot":""}